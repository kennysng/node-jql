const keywords = [
  'ADD',
  'ADD CONSTRAINT',
  'ALTER',
  'ALTER COLUMN',
  'ALTER TABLE',
  'ALL',
  'AND',
  'ANY',
  'AS',
  'ASC',
  'BACKUP DATABASE',
  'BETWEEN',
  'CASE',
  'CHECK',
  'COLUMN',
  'CONSTRAINT',
  'CREATE',
  'CREATE DATABASE',
  'CREATE INDEX',
  'CREATE OR REPLACE VIEW',
  'CREATE VIEW',
  'DATABASE',
  'DEFAULT',
  'DELETE',
  'DESC',
  'DINSTINCT',
  'DROP',
  'DROP COLUMN',
  'DROP CONSTRAINT',
  'DROP DEFAULT',
  'DROP INDEX',
  'DROP TABLE',
  'DROP VIEW',
  'EXEC',
  'EXISTS',
  'FOREIGN KEY',
  'FROM',
  'FULL OUTER JOIN',
  'GROUP BY',
  'HAVING',
  'IN',
  'INDEX',
  'INNER JOIN',
  'INSERT INTO',
  'INSERT INTO SELECT',
  'IS NULL',
  'IS NOT NULL',
  'JOIN',
  'LEFT JOIN',
  'LIKE',
  'LIMIT',
  'NOT',
  'NOT NULL',
  'OR',
  'ORDER BY',
  'OUTER JOIN',
  'PRIMARY KEY',
  'PROCEDURE',
  'RIGHT JOIN',
  'ROWNUM',
  'SELECT',
  'SELECT DISTINCT',
  'SELECT INTO',
  'SELECT TOP',
  'SET',
  'TABLE',
  'TOP',
  'TRUNCATE TABLE',
  'UNION',
  'UNION ALL',
  'UNIQUE',
  'UPDATE',
  'VALUES',
  'VIEW',
  'WHERE',
]

/**
 * Check whether the word is a SQL keyword
 * @param word [string]
 */
export default function isKeyword(word: string): boolean {
  return !!keywords.find(keyword => keyword === word || keyword.toLowerCase() === word.toLowerCase())
}
